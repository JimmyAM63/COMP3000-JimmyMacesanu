using NaplexAPI.Infrastructure;
using NaplexAPI.Models.DTOs;
using NaplexAPI.Models.Entities;
using Microsoft.EntityFrameworkCore;

namespace NaplexAPI.Services
{
    public class SalesService : ISalesService
    {
        private readonly ApplicationDbContext _context;

        public SalesService(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<SaleDTO> CreateSale(SaleDTO saleDto)
        {
            const decimal DiscountRate = 0.15m; // 15% discount

            // Check if the SKUCode and OrderType (Acq_Ret) exists in the SKU table and is valid
            var sku = await _context.SKUs
                .FirstOrDefaultAsync(s => s.SOC_Code == saleDto.SKU && s.Acq_Ret == saleDto.OrderType);
            if (sku == null)
            {
                throw new ArgumentException("Invalid SKU Code or Order Type.");
            }

            var employeeStore = await _context.EmployeeStores
                .FirstOrDefaultAsync(es => es.UserId == saleDto.UserId && es.StoreId == saleDto.StoreId);

            if (employeeStore == null)
            {
                throw new ArgumentException("Invalid User ID or User is not associated with the given store.");
            }

            // Retrieve the store name based on StoreId
            var storeName = await _context.Stores
                .Where(s => s.Id == saleDto.StoreId)
                .Select(s => s.StoreName)
                .FirstOrDefaultAsync();

            if (string.IsNullOrEmpty(storeName))
            {
                throw new ArgumentException("Invalid Store ID.");
            }

            // Retrieve the pricing information from the SKUs table
            var pricingInfo = await _context.SKUs
                .Where(sku => sku.SOC_Code == saleDto.SKU && sku.Acq_Ret == saleDto.OrderType)
                .Select(sku => EF.Property<decimal>(sku, storeName)) // Dynamically select the column based on store name
                .SingleOrDefaultAsync();

            if (pricingInfo == default(decimal))
            {
                throw new Exception("Pricing information not found for the given SKU, Store, and Order Type.");
            }

            // Apply discount if IsDiscounted is true
            if (saleDto.IsDiscounted)
            {
                pricingInfo -= pricingInfo * DiscountRate; // Apply 15% discount
            }

            // Retrieve Type infromation from the SKUs table
            var skuDetails = await _context.SKUs
                .FirstOrDefaultAsync(s => s.SOC_Code == saleDto.SKU);

            if (skuDetails == null)
            {
                throw new ArgumentException("Invalid SKU Code.");
            }

            // Create a new Sale entity with the retrieved revenue value
            var sale = new Sale
            {
                SKU = saleDto.SKU,
                OrderType = saleDto.OrderType, // This is equivalent to Acq_Ret in the SKU table
                OrderNumber = saleDto.OrderNumber,
                SaleDate = saleDto.SaleDate,
                SaleTime = saleDto.SaleTime,
                EmployeeStore = employeeStore,
                Revenue = pricingInfo, // Set the revenue with the retrieved price
                SKU_Type = skuDetails.Type,
                SKU_Description = skuDetails.Description,
                IsAdditional = saleDto.IsAdditional,
                IsDiscounted = saleDto.IsDiscounted,
            };

            _context.Sales.Add(sale);
            await _context.SaveChangesAsync();

            await UpdateTargetAfterSale(sale);

            // Map the Sale entity back to SaleDTO
            saleDto.SaleId = sale.SaleId; // Assuming the Id is generated by the database
            saleDto.Revenue = sale.Revenue;
            saleDto.SKU_Type = skuDetails.Type;

            return saleDto;
        }

        private async Task UpdateTargetAfterSale(Sale sale)
        {
            var firstDayOfMonth = new DateTime(sale.SaleDate.Year, sale.SaleDate.Month, 1);

            var target = await _context.Targets
                .FirstOrDefaultAsync(t => t.EmployeeStore.UserId == sale.EmployeeStore.UserId &&
                                          t.TargetDate == firstDayOfMonth);

            if (target == null)
            {
                // If there's no target for this month, create it
                target = new Target
                {
                    // Initialize all properties
                    EmployeeStore = sale.EmployeeStore,
                    TargetDate = firstDayOfMonth,
                    NewAct = 0,
                    NewTar = 0,
                    TalkMobileAct = 0,
                    TalkMobileTar = 0,
                    UpgradesAct = 0,
                    UpgradesTar = 0,
                    HBBAct = 0,
                    HBBTar = 0,
                    HBBUpAct = 0,
                    HBBUpTar = 0,
                    RevAct = 0,
                    RevTar = 0,
                    UnlimitedAct = 0,
                    UnlimitedTar = 0,
                    InsuranceAct = 0,
                    InsuranceTar = 0,
                    EntertainmentAct = 0,
                    EntertainmentTar = 0,
                    AdditionalAct = 0,
                    AdditionalTar = 0
                };
                _context.Targets.Add(target);
            }

                // Normalize the description to handle case and whitespace issues
                string description = sale.SKU_Description?.Trim().ToLower();

                // Log fetched SKU details
                Console.WriteLine($"SKU Type: {sale.SKU_Type}, Description: {description}");

                // Now, update the actual based on SKU_Type and OrderType
                if (sale.OrderType == "Acquisition" && (sale.SKU_Type == "SIMO" || sale.SKU_Type == "SIMO AIRTIME" ||
                    sale.SKU_Type == "EBU SIMO AIRTIME" || sale.SKU_Type == "EBU SOHO" || sale.SKU_Type == "EBU VOICE" ||
                    sale.SKU_Type == "GIGACUBE" || sale.SKU_Type == "MBB" || sale.SKU_Type == "EBU MBB" ||
                    sale.SKU_Type == "ONE NUMBER"))
                {
                    target.NewAct += 1;
                    if (!string.IsNullOrEmpty(description) && description.Contains("unlimited"))
                    {
                        target.UnlimitedAct += 1;
                    }
                }

                if (sale.OrderType == "Acquisition" && sale.SKU_Type == "TALK MOBILE")
                {
                    target.TalkMobileAct += 1;
                    if (!string.IsNullOrEmpty(description) && description.Contains("unlimited"))
                    {
                        target.UnlimitedAct += 1;
                    }
                }

                if (sale.OrderType == "Retention" && (sale.SKU_Type == "SIMO" || sale.SKU_Type == "SIMO AIRTIME" ||
                    sale.SKU_Type == "EBU SIMO AIRTIME" || sale.SKU_Type == "EBU SOHO" || sale.SKU_Type == "EBU VOICE" ||
                    sale.SKU_Type == "GIGACUBE" || sale.SKU_Type == "MBB" || sale.SKU_Type == "EBU MBB" ||
                    sale.SKU_Type == "ONE NUMBER"))
                {
                    target.UpgradesAct += 1;
                    if (!string.IsNullOrEmpty(description) && description.Contains("unlimited"))
                    {
                        target.UnlimitedAct += 1;
                    }
                }

                if (sale.OrderType == "Acquisition" && (sale.SKU_Type == "HBB" || sale.SKU_Type == "EBU HBB"))
                {
                    target.HBBAct += 1;
                    if (!string.IsNullOrEmpty(description) && description.Contains("unlimited"))
                    {
                        target.UnlimitedAct += 1;
                    }
                }
                else if (sale.OrderType == "Retention" && (sale.SKU_Type == "HBB" || sale.SKU_Type == "EBU HBB"))
                {
                    target.HBBUpAct += 1;
                    if (!string.IsNullOrEmpty(description) && description.Contains("unlimited"))
                    {
                        target.UnlimitedAct += 1;
                    }
                }

                if (sale.OrderType == "Acquisition" && sale.IsAdditional == true)
                {
                    target.AdditionalAct += 1;
                    if (!string.IsNullOrEmpty(description) && description.Contains("unlimited"))
                    {
                        target.UnlimitedAct += 1;
                    }
                }

                // Add other conditions based on SKU_Type

            await _context.SaveChangesAsync();
        }



        public async Task<SaleDTO> GetSaleById(int saleId)
        {
            var sale = await _context.Sales
                .Include(s => s.EmployeeStore)
                .ThenInclude(es => es.Store)
                .Include(s => s.EmployeeStore)
                .ThenInclude(s => s.User)
                .FirstOrDefaultAsync(s => s.SaleId == saleId);

            if (sale == null)
            {
                throw new KeyNotFoundException("Sale not found.");
            }

            return new SaleDTO
            {
                SaleId = sale.SaleId,
                SKU = sale.SKU,
                OrderType = sale.OrderType,
                OrderNumber = sale.OrderNumber,
                SaleDate = sale.SaleDate,
                SaleTime = sale.SaleTime,
                UserId = sale.EmployeeStore.UserId, // Use UserId from EmployeeStore
                StoreId = sale.EmployeeStore.StoreId,
                Revenue = sale.Revenue,
                IsAdditional = sale.IsAdditional,
                IsDiscounted = sale.IsDiscounted
            };
        }



        public async Task<IEnumerable<SaleDTO>> GetAllSales()
        {
            var sales = await _context.Sales
                .Include(s => s.EmployeeStore)
                .ThenInclude(es => es.Store)
                .Include(s => s.EmployeeStore)
                .ThenInclude(es => es.User)
                .Select(s => new SaleDTO
                {
                    SaleId = s.SaleId,
                    SKU = s.SKU,
                    OrderType = s.OrderType,
                    OrderNumber = s.OrderNumber,
                    SaleDate = s.SaleDate,
                    SaleTime = s.SaleTime,
                    UserId = s.EmployeeStore.UserId,
                    StoreId = s.EmployeeStore.StoreId,
                    Revenue = s.Revenue,
                    SKU_Type = s.SKU_Type,
                    IsAdditional= s.IsAdditional,
                    IsDiscounted = s.IsDiscounted
                })
                .ToListAsync();

            return sales;
        }

        public async Task UpdateSale(int SaleId, SaleDTO saleDto)
        {
            var sale = await _context.Sales
                .Include(s => s.EmployeeStore)
                .FirstOrDefaultAsync(s => s.SaleId == SaleId);

            if (sale == null)
            {
                throw new KeyNotFoundException("Sale not found.");
            }

            // Update the properties of sale with those from saleDto
            sale.SKU = saleDto.SKU;
            sale.OrderType = saleDto.OrderType;
            sale.OrderNumber = saleDto.OrderNumber;
            sale.SaleDate = saleDto.SaleDate;
            sale.SaleTime = saleDto.SaleTime;
            // Do not update UserId or StoreId directly since they are part of EmployeeStore

            await _context.SaveChangesAsync();
        }

        public async Task DeleteSale(int id)
        {
            var sale = await _context.Sales.FindAsync(id);

            if (sale == null)
            {
                throw new KeyNotFoundException("Sale not found.");
            }

            _context.Sales.Remove(sale);
            await _context.SaveChangesAsync();
        }
    }
}
